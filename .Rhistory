# train_lm = train[[,-1]]
# as.vector(train[,-1])
sa.lm = lm(QLI~., data=train)
sa.pred = predict(sa.lm, test)
rmse(test[["QLI"]], as.vector(sa.pred))
# 画趋势图
data_2016 = sqldf("select * from banner_trend where YEAR_OF_WEEK=2016 order by WEEK_OF_YEAR")
data_2017 = sqldf("select * from banner_trend where YEAR_OF_WEEK=2017 order by WEEK_OF_YEAR")
data_2018 = sqldf("select * from banner_trend where YEAR_OF_WEEK=2018 order by WEEK_OF_YEAR")
attach_2016 = rep(0, 52-length(data_2016$QLI))
# length(data_2016)
# length(data_2016$QLI)
# length((attach_2016))
attach_2016 = c(attach, data_2016$QLI)
attach_2018 = rep(0, 52-length(data_2018$QLI))
attach_2018 = c(data_2018$QLI, attach_2018)
cycle = c(1:52)
plot(cycle, attach_2016, type='b', col=2)
lines(cycle, data_2017$QLI, type='b', col=3)
lines(cycle, attach_2018, type='b', col=4)
library(randomForest)
library(sqldf)
library(CrossR)
library(caret)
library(Metrics)
df = read.csv("dataset\\SalesTrend.csv")
# head(df, 1)
trend = sqldf("select REPORT_DATE, sum(QLI) as QLI
,avg(LAST_1_MONTH_AVG) as LAST_1_MONTH_AVG
,avg(LAST_1_MONTH_MID75) as LAST_1_MONTH_MID75
,avg(LAST_1_MONTH_MAX) as LAST_1_MONTH_MAX
,avg(LAST_1_MONTH_SUM) as LAST_1_MONTH_SUM
,avg(LAST_1_MONTH_MID) as LAST_1_MONTH_MID
,avg(LAST_2_MONTH_AVG) as LAST_2_MONTH_AVG
,avg(LAST_1_MONTH_MID25) as LAST_1_MONTH_MID25
,avg(LAST_2_MONTH_MAX) as LAST_2_MONTH_MAX
,avg(LAST_2_MONTH_SUM) as LAST_2_MONTH_SUM
,avg(LAST_2_MONTH_MID75) as LAST_2_MONTH_MID75
,avg(LAST_2_MONTH_MID) as LAST_2_MONTH_MID
,avg(LAST_2_MONTH_MID25) as LAST_2_MONTH_MID25
,avg(LAST_3_MONTH_AVG) as LAST_3_MONTH_AVG
,avg(LAST_3_MONTH_MAX) as LAST_3_MONTH_MAX
,avg(LAST_1_MONTH_MIN) as LAST_1_MONTH_MIN
,avg(LAST_3_MONTH_MID25) as LAST_3_MONTH_MID25
,avg(LAST_3_MONTH_SUM) as LAST_3_MONTH_SUM
from df where BANNER_NAME='Carrefour' group by REPORT_DATE")
banner_group_raw = read.csv("dataset\\banner_group.csv")
banner_group=banner_group_raw[-2]
banner_trend = merge(trend, banner_group, by="REPORT_DATE")
# head(banner_trend)
banner_trend = sqldf("select * from (select sum(QLI) AS QLI,YEAR_OF_WEEK,WEEK_OF_YEAR
,IS_CHRISTMAS
,LAST_1_MONTH_AVG
,LAST_1_MONTH_MID75
,LAST_1_MONTH_MAX
,LAST_1_MONTH_SUM
,LAST_1_MONTH_MID
,LAST_2_MONTH_AVG
,LAST_1_MONTH_MID25
,LAST_2_MONTH_MAX
,LAST_2_MONTH_SUM
,LAST_2_MONTH_MID75
,LAST_2_MONTH_MID
,LAST_2_MONTH_MID25
,LAST_3_MONTH_AVG
,LAST_3_MONTH_MAX
,LAST_1_MONTH_MIN
,LAST_3_MONTH_MID25
,LAST_3_MONTH_SUM
from banner_trend group by YEAR_OF_WEEK,WEEK_OF_YEAR) order by YEAR_OF_WEEK,WEEK_OF_YEAR")
write.csv(banner_trend, "dataset\\banner_trend_byweek.csv")
# head(banner_trend, 1)
#banner_trend = banner_trend[-1,]
# head(banner_trend, 1)
# 采用随机森林方式处理
set.seed(42)
trainIndex = createDataPartition(banner_trend$QLI,
p=0.8, list=FALSE,times=1)
train = banner_trend[trainIndex,]
test = banner_trend[-trainIndex,]
rf = randomForest(QLI~., data=train,mtry=3,
importance=TRUE, na.action=na.omit)
y_test_Hat = predict(rf, test)
# y_test_Hat
# banner_trend["REPORT_DATE"]
y_test_Hat = as.vector(y_test_Hat)
rmse(test[["QLI"]], as.vector(y_test_Hat))
# length(y_test_Hat)
# 采用时间序列方式处理
ts.raw = test[["QLI"]]
ts.ts = ts(ts.raw, start = c(2016,35), end=c(2018,14),frequency = 52)
# ts.ts
ts.ma=arima(ts.ts, order=c(2,0,1), seasonal = list(order=c(1,0,0), period=52))
pred_val =predict(ts.ma, 24)
# pred_val
rmse(banner_trend[["QLI"]][-(1:99)], as.vector(pred_val$se))
# 线性回归处理
# train_lm = train[[,-1]]
# as.vector(train[,-1])
sa.lm = lm(QLI~., data=train)
sa.pred = predict(sa.lm, test)
rmse(test[["QLI"]], as.vector(sa.pred))
# 画趋势图
data_2016 = sqldf("select * from banner_trend where YEAR_OF_WEEK=2016 order by WEEK_OF_YEAR")
data_2017 = sqldf("select * from banner_trend where YEAR_OF_WEEK=2017 order by WEEK_OF_YEAR")
data_2018 = sqldf("select * from banner_trend where YEAR_OF_WEEK=2018 order by WEEK_OF_YEAR")
attach_2016 = rep(0, 52-length(data_2016$QLI))
# length(data_2016)
# length(data_2016$QLI)
# length((attach_2016))
attach_2016 = c(attach, data_2016$QLI)
attach_2018 = rep(0, 52-length(data_2018$QLI))
attach_2018 = c(data_2018$QLI, attach_2018)
cycle = c(1:52)
plot(cycle, attach_2016, type='b', col=2)
lines(cycle, data_2017$QLI, type='b', col=3)
lines(cycle, attach_2018, type='b', col=4)
# length(data_2016)
# length(data_2016$QLI)
length((attach_2016))
attach_2016 = rep(0, 52-length(data_2016$QLI))
# length(data_2016)
# length(data_2016$QLI)
length((attach_2016))
length(data_2016$QLI)
attach_2016 = c(attach, data_2016$QLI)
# length(data_2016)
# length(data_2016$QLI)
length((attach_2016))
attach_2016 = rep(0, 52-length(data_2016$QLI))
# length(data_2016)
# length(data_2016$QLI)
length((attach_2016))
attach_2016 = c(attach_2016, data_2016$QLI)
# length(data_2016)
# length(data_2016$QLI)
length((attach_2016))
plot(cycle, attach_2016, type='b', col=2)
lines(cycle, data_2017$QLI, type='b', col=3)
lines(cycle, attach_2018, type='b', col=4)
help(plot)
plot(cycle, attach_2016, type='l', col=2)
lines(cycle, data_2017$QLI, type='l', col=3)
lines(cycle, attach_2018, type='l', col=4)
ts.raw = test[["QLI"]]
ts.ts = ts(ts.raw, start = c(2016,35), end=c(2018,14),frequency = 52)
# ts.ts
ts.ma=arima(ts.ts, order=c(1,0,1), seasonal = list(order=c(1,0,0), period=52))
pred_val =predict(ts.ma, 24)
# pred_val
rmse(banner_trend[["QLI"]][-(1:99)], as.vector(pred_val$se))
ts.raw = test[["QLI"]]
ts.ts = ts(ts.raw, start = c(2016,35), end=c(2018,14),frequency = 52)
# ts.ts
ts.ma=arima(ts.ts, order=c(2,0,1), seasonal = list(order=c(1,0,0), period=52))
pred_val =predict(ts.ma, 24)
# pred_val
rmse(banner_trend[["QLI"]][-(1:99)], as.vector(pred_val$se))
ts.raw = test[["QLI"]]
ts.ts = ts(ts.raw, start = c(2016,35), end=c(2018,14),frequency = 52)
# ts.ts
ts.ma=arima(ts.ts, order=c(1,1,1), seasonal = list(order=c(1,0,0), period=52))
pred_val =predict(ts.ma, 24)
# pred_val
rmse(banner_trend[["QLI"]][-(1:99)], as.vector(pred_val$se))
# 采用时间序列方式处理
ts.raw = test[["QLI"]]
ts.ts = ts(ts.raw, start = c(2016,35), end=c(2018,14),frequency = 52)
# ts.ts
ts.ma=arima(ts.ts, order=c(1,1,0), seasonal = list(order=c(1,0,0), period=52))
pred_val =predict(ts.ma, 24)
# pred_val
rmse(banner_trend[["QLI"]][-(1:99)], as.vector(pred_val$se))
length(y_test_Hat)
# 采用时间序列方式处理
ts.raw = test[["QLI"]]
ts.ts = ts(ts.raw, start = c(2016,35), end=c(2018,14),frequency = 52)
# ts.ts
ts.ma=arima(ts.ts, order=c(2,0,1), seasonal = list(order=c(1,0,0), period=52))
pred_val =predict(ts.ma, 20)
# pred_val
rmse(banner_trend[["QLI"]][-(1:99)], as.vector(pred_val$se))
# 采用时间序列方式处理
ts.raw = test[["QLI"]]
ts.ts = ts(ts.raw, start = c(2016,35), end=c(2018,14),frequency = 52)
# ts.ts
ts.ma=arima(ts.ts, order=c(2,0,1), seasonal = list(order=c(1,0,0), period=52))
pred_val =predict(ts.ma, 20)
# pred_val
rmse(banner_trend[["QLI"]][-(1:103)], as.vector(pred_val$se))
# 采用时间序列方式处理
ts.raw = test[["QLI"]]
ts.ts = ts(ts.raw, start = c(2016,35), end=c(2018,14),frequency = 52)
# ts.ts
ts.ma=arima(ts.ts, order=c(1,0,1), seasonal = list(order=c(1,0,0), period=52))
pred_val =predict(ts.ma, 20)
# pred_val
rmse(banner_trend[["QLI"]][-(1:103)], as.vector(pred_val$se))
# 采用时间序列方式处理
ts.raw = test[["QLI"]]
ts.ts = ts(ts.raw, start = c(2016,35), end=c(2018,14),frequency = 52)
# ts.ts
ts.ma=arima(ts.ts, order=c(1,1,1), seasonal = list(order=c(1,0,0), period=52))
pred_val =predict(ts.ma, 20)
# pred_val
rmse(banner_trend[["QLI"]][-(1:103)], as.vector(pred_val$se))
# 采用时间序列方式处理
ts.raw = test[["QLI"]]
ts.ts = ts(ts.raw, start = c(2016,35), end=c(2018,14),frequency = 52)
# ts.ts
ts.ma=arima(ts.ts, order=c(1,0,0), seasonal = list(order=c(1,0,0), period=52))
pred_val =predict(ts.ma, 20)
# pred_val
rmse(banner_trend[["QLI"]][-(1:103)], as.vector(pred_val$se))
# 采用时间序列方式处理
ts.raw = test[["QLI"]]
ts.ts = ts(ts.raw, start = c(2016,35), end=c(2018,14),frequency = 52)
# ts.ts
ts.ma=arima(ts.ts, order=c(0,0,1), seasonal = list(order=c(1,0,0), period=52))
pred_val =predict(ts.ma, 20)
# pred_val
rmse(banner_trend[["QLI"]][-(1:103)], as.vector(pred_val$se))
# 采用时间序列方式处理
ts.raw = test[["QLI"]]
ts.ts = ts(ts.raw, start = c(2016,35), end=c(2018,14),frequency = 52)
# ts.ts
ts.ma=arima(ts.ts, order=c(0,1,1), seasonal = list(order=c(1,0,0), period=52))
pred_val =predict(ts.ma, 20)
# pred_val
rmse(banner_trend[["QLI"]][-(1:103)], as.vector(pred_val$se))
# 采用时间序列方式处理
ts.raw = test[["QLI"]]
ts.ts = ts(ts.raw, start = c(2016,35), end=c(2018,14),frequency = 52)
# ts.ts
ts.ma=arima(ts.ts, order=c(0,0,2), seasonal = list(order=c(1,0,0), period=52))
pred_val =predict(ts.ma, 20)
# pred_val
rmse(banner_trend[["QLI"]][-(1:103)], as.vector(pred_val$se))
# 采用时间序列方式处理
ts.raw = test[["QLI"]]
ts.ts = ts(ts.raw, start = c(2016,35), end=c(2018,14),frequency = 52)
# ts.ts
ts.ma=arima(ts.ts, order=c(0,0,1), seasonal = list(order=c(1,0,0), period=52))
pred_val =predict(ts.ma, 20)
# pred_val
rmse(banner_trend[["QLI"]][-(1:103)], as.vector(pred_val$se))
# 采用时间序列方式处理
ts.raw = test[["QLI"]]
ts.ts = ts(ts.raw, start = c(2016,35), end=c(2018,14),frequency = 52)
# ts.ts
ts.ma=arima(ts.ts, order=c(0,0,2), seasonal = list(order=c(1,0,0), period=52))
pred_val =predict(ts.ma, 20)
# pred_val
rmse(banner_trend[["QLI"]][-(1:103)], as.vector(pred_val$se))
# 采用时间序列方式处理
ts.raw = test[["QLI"]]
ts.ts = ts(ts.raw, start = c(2016,35), end=c(2018,14),frequency = 52)
# ts.ts
ts.ma=arima(ts.ts, order=c(0,0,2), seasonal = list(order=c(1,1,0), period=52))
pred_val =predict(ts.ma, 20)
# pred_val
rmse(banner_trend[["QLI"]][-(1:103)], as.vector(pred_val$se))
ts.raw = test[["QLI"]]
ts.ts = ts(ts.raw, start = c(2016,35), end=c(2018,14),frequency = 52)
# ts.ts
ts.ma=arima(ts.ts, order=c(0,0,2), seasonal = list(order=c(1,1,1), period=52))
pred_val =predict(ts.ma, 20)
# pred_val
rmse(banner_trend[["QLI"]][-(1:103)], as.vector(pred_val$se))
# 采用时间序列方式处理
ts.raw = test[["QLI"]]
ts.ts = ts(ts.raw, start = c(2016,35), end=c(2018,14),frequency = 52)
# ts.ts
ts.ma=arima(ts.ts, order=c(0,0,2), seasonal = list(order=c(1,1,2), period=52))
pred_val =predict(ts.ma, 20)
# pred_val
rmse(banner_trend[["QLI"]][-(1:103)], as.vector(pred_val$se))
# 采用时间序列方式处理
ts.raw = test[["QLI"]]
ts.ts = ts(ts.raw, start = c(2016,35), end=c(2018,14),frequency = 52)
# ts.ts
ts.ma=arima(ts.ts, order=c(0,0,2), seasonal = list(order=c(2,1,2), period=52))
pred_val =predict(ts.ma, 20)
# pred_val
rmse(banner_trend[["QLI"]][-(1:103)], as.vector(pred_val$se))
print(line)
print(test.data)
test.data='height weight
58    115
59    117
60    120
61    123
62    126
63    129
64    132
65    135
66    139
67    142
68    146
69    150
70    154
71    159
72    164'
print(test.data)
DF <- read.table(text = test.data, header = TRUE)
DF
plot(women)
data_womone='height weight
58    115
59    117
60    120
61    123
62    126
63    129
64    132
65    135
66    139
67    142
68    146
69    150
70    154
71    159
72    164'
women <- read.table(text = data_womone, header = TRUE)
plot(women)
women.model<-lm(weight~height, data = women.df)
women.df <- read.table(text = women.text, header = TRUE)
plot(women.df)
women.df <- read.table(text = women.text, header = TRUE)
women.text='height weight
58    115
59    117
60    120
61    123
62    126
63    129
64    132
65    135
66    139
67    142
68    146
69    150
70    154
71    159
72    164'
women.df <- read.table(text = women.text, header = TRUE)
plot(women.df)
women.model<-lm(weight~height, data = women.df)
summary(women.model)
summary(fit)
fit<-lm(weight~height, data = women.df)
summary(fit)
plot(women.df$height, women.df$weight)
plot(women.df$height, women.df$weight)
plot(women.df$height, women.df$weight)
abline(fit)
plot(women.df,col=2)
plot(women.df$height, women.df$weight,col=3)
weight_hat = predict(fit, women.df$height)
plot(women.df$height, weight_hat, col=4)
plot(women.df$height, women.df$weight,col=3)
abline(fit)
weight_hat = predict(fit, women.df$height)
plot(women.df$height, weight_hat, col=4)
plot(women.df$height, weight_hat, col=5)
plot(women.df$height, weight_hat, col=5, type='b')
weight_hat
weight_hat = predict(fit, women.df$height)
fit
weight_hat = predict(fit, women.df$height)
par(mfrow=c(2,2))
plot(fit)
fit2<-lm(weight~height, data=women.df)
3^2
9^1/2
9^(1/2)
fit2<-lm(weight~height+I(height^2), data=women.df)
plot(fit2)
par(mfrow=c(2,2))
plot(fit2)
summary(fit2)
help(lm)
x <- rnorm(15)
y <- x + rnorm(15)
predict(lm(y ~ x))
new <- data.frame(x = seq(-3, 3, 0.5))
predict(lm(y ~ x), new, se.fit = TRUE)
weight_hat = predict(fit, women.df$height)
weight_hat = predict(fit, women.df$height,se.fit = TRUE)
cor(women.df$height, women.df$weight)
weight_hat = predict(fit, women.df$height,se.fit = TRUE)
weight_hat = predict(fit, women.df$weight,se.fit = TRUE)
weight_hat = predict(fit, women.df$height,se.fit = TRUE)
weight_hat = predict(fit, women.df$height,interval="confidence")
weight_hat = predict(fit, women.df,interval="confidence")
plot(women.df$height, weight_hat, col=5, type='b')
dim(weight_hat)
weight_hat
weight_hat = predict(fit, women.df,interval="prediction")
dim(weight_hat)
plot(women.df$height, weight_hat$fit, col=5, type='b')
weight_hat$fit
weight_hat
plot(women.df$height, weight_hat["fit"], col=5, type='b')
dim(women.df$height)
length(women.df$height)
women.df
weight_hat
weight_hat$lwr
women.df$height
weight_hat["lwr"]
weight_hat["fit"]
plot(women.df$height, weight_hat[0], col=5, type='b')
weight_hat[0]
weight_hat[1]
weight_hat
as.vector(weight_hat)
plot(women.df$height, as.vector(weight_hat), col=5, type='b')
plot(women.df$height, as.vector(weight_hat[1:15]), col=5, type='b')
plot(women.df$height, women.df$weight,col=3)
plot(women.df$height, as.vector(weight_hat[1:15]), col=5, type='b')
abline(fit)
plot(women.df$height, women.df$weight,col=3)
abline(women.df$height, as.vector(weight_hat[1:15]), col=5, type='b')
plot(women.df$height, women.df$weight,col=3)
abline(women.df$height, as.vector(weight_hat[1:15]), col=5, type='b')
abline(women.df$height, as.vector(weight_hat[1:15]), col=5)
plot(women.df$height, women.df$weight,col=3)
abline(women.df$height, as.vector(weight_hat[1:15]), col=5)
abline(women.df$height, as.vector(weight_hat[1:15]), col=5)
abline(women.df$height, as.vector(weight_hat[1:15]))
abline(women.df$height, weight_hat[1:15])
plot(women.df$height, women.df$weight,col=3)
abline(women.df$height, weight_hat[1:15])
plot(women.df$height, weight_hat[1:15])
plot(women.df$height, women.df$weight,col=3)
abline(women.df$height, weight_hat[1:15])
plot(women.df$height, women.df$weight,col=3)
abline(women.df$height, weight_hat[1:15])
abline(women.df)
abline(women)
seq(1, 10, by = 2)  # diff between adj elements is 2
seq(1, 10, length=25)  # length of the vector is 25
# randomForest taste
data_train = read.csv("dataset\\train_rf.csv")
data_test = read.csv("dataset\\test_rf.csv")
library(randomForest)
library(caret)
library(e1071)
head(data_train, 2)
rf_default=train(Survived~., data=data_train, method="rf",metric="Accuracy", trControl=trControl)
rf_default=train(survived~., data=data_train, method="rf",metric="Accuracy", trControl=trControl)
rf_default=train(Survived~., data=data_train, method="rf",metric="Accuracy", trControl=trControl)
data_train
rf_default <- train(survived~.,
data = data_train,
method = "rf",
metric = "Accuracy",
trControl = trControl)
rf_default <- train(Survived~.,
data = data_train,
method = "rf",
metric = "Accuracy",
trControl = trControl)
set.seed(1234)
head(data_train, 2)
rf_default=train(Survived~., data=data_train, method="rf",metric="Accuracy", trControl=trControl)
rf_default <- train(Survived~.,
data = data_train,
method = "rf",
metric = "Accuracy",
trControl = trControl)
rf_default=train(Survived~Age+pClass+Sibsp+Parch, data=data_train, method="rf",metric="Accuracy", trControl=trControl)
rf_default=train(Survived~Age+Pclass+Sibsp+Parch, data=data_train, method="rf",metric="Accuracy", trControl=trControl)
rf_default=train(Survived~Age+Pclass+SibSp+Parch, data=data_train, method="rf",metric="Accuracy", trControl=trControl)
rf_default=train(Survived~Age+Pclass+SibSp+Parch, data=data_train, method="rf",metric="Accuracy", trControl=trControl)
rf_default <- train(Survived~Age+Pclass+SibSp+Parch,
data = data_train,
method = "rf",
metric = "Accuracy",
trControl = trControl)
data_train <- na.omit(data_train_raw)
head(data_train, 2)
data_train_raw = read.csv("dataset\\train_rf.csv")
data_train <- na.omit(data_train_raw)
head(data_train, 2)
dim(data_train)
dim(data_train_raw)
rf_default=train(Survived~Age+Pclass+SibSp+Parch, data=data_train, method="rf",metric="Accuracy", trControl=trControl)
data_train_raw = read.csv("dataset\\train_rf.csv")
data_train <- na.omit(data_train_raw)
head(data_train, 2)
dim(data_train_raw)
data_test = read.csv("dataset\\test_rf.csv")
library(randomForest)
library(caret)
library(e1071)
trControl = trainControl(mmethod = cv, number=10, search = "grid")
set.seed(1234)
rf_default=train(Survived~Age+Pclass+SibSp+Parch, data=data_train, method="rf",metric="Accuracy", trControl=trControl)
help("trainControl")
trControl = trainControl(method = "cv", number=10, search = "grid")
set.seed(1234)
rf_default=train(Survived~Age+Pclass+SibSp+Parch, data=data_train, method="rf",metric="Accuracy", trControl=trControl)
glimpse(data_train)
glimpse(data_train_raw)
library(dplyr)
glimpse(data_train)
glimpse(data_test)
rf_default=train(Survived~., data=data_train, method="rf",metric="Accuracy", trControl=trControl)
# Print the results
print(rf_default)
